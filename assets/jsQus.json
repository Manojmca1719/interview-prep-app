[
    {
        "id": 1,
        "qus": "What is javaScript ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " JavaScript is the Programming Language for the Web. JavaScript can update and change both HTML and CSS. JavaScript can calculate, manipulate and validate data."
            }
        ]
    },
    {
        "id": 2,
        "qus": "What is W3C  ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "W3C stands for WWW Consortium.",
                    "They are providing the protocols for the web standards - Founder : Tim Berners-Lee"
                ]
            }
        ]
    },
    {
        "id": 3,
        "qus": "What is DOM  ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " DOM stands for Document Object Model"
            },
            {
                "dataType": "paragraph",
                "data": " It is a programming interface use to manipulate elements, styles, events and etc.,"
            },
            {
                "dataType": "list",
                "data": [
                    "Document - File.",
                    "Object - Tags and Elements.",
                    "Model â€“ Structure."
                ]
            }
        ]
    },
    {
        "id": 4,
        "qus": "Types of DOM ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "Core DOM",
                    "XML DOM",
                    "HTML DOM"
                ]
            }
        ]
    },
    {
        "id": 5,
        "qus": "Explain about HTML DOM ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " HTML DOM converts html elements, properties and their methods into object."
            },
            {
                "dataType": "paragraph",
                "data": " It used to add, get, change or delete the HTML elements."
            }
        ]
    },
    {
        "id": 6,
        "qus": "What are the Scopes are available in Javascript ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "Global Scope",
                    "Function Scope",
                    "Block Scope"
                ]
            }
        ]
    },
    {
        "id": 7,
        "qus": "What is hoisting ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Hoisting is the default behavior of moving all the declarations at the top of the scope before code execution."
            },
            {
                "dataType": "paragraph",
                "data": " JavaScript only hoists declarations, not initializations."
            },
            {
                "dataType": "code",
                "data": "\nfunction codeHoist() { \n a = 10; \n let b = 50; \n } \n codeHoist();\n console.log(a); // 10 \n console.log(b); // ReferenceError : b is not defined"
            }
        ]
    },
    {
        "id": 8,
        "qus": "What is factory function ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " A factory function can be defined as a function that creates an object and returns it.\n function name will be in camelCase."
            }
        ]
    },
    {
        "id": 9,
        "qus": "What is constructor ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Constructor enables to provide custom initialization that must be done before any other methods can be called on an instantiated object ."
            },
            {
                "dataType": "paragraph",
                "data": " Constructor function name should be in Pascal Case ."
            },
            {
                "dataType": "paragraph",
                "data": " this keyword can be used inside of the constructor function."
            },
            {
                "dataType": "paragraph",
                "data": " It will automatically return the result, no need to write return keyword."
            },
            {
                "dataType": "code",
                "data": "\nSyntax : \n function Person() { // Pascal Case \n this.name = 'vijay',// this refers to create \n this.age  = 29 \n } \n\n var person   = new Person();  // new keyword refers to create new object \n console.log(person.age);"
            }
        ]
    },
    {
        "id": 10,
        "qus": "Types of constructor ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "Built-in Constructor",
                    "Custom Constructor"
                ]
            }
        ]
    },
    {
        "id": 11,
        "qus": "What are the Primitive data types ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "String",
                    "Number",
                    "Boolean",
                    "Symbol",
                    "Null",
                    "Undefined"
                ]
            }
        ]
    },
    {
        "id": 12,
        "qus": "What are the Non - Primitive (Reference Type) data types ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "Object",
                    "Array",
                    "Function"
                ]
            }
        ]
    },
    {
        "id": 13,
        "qus": "What is coercion ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Coercion refers to the process of automatic or implicit conversion of values from one data type to another."
            },
            {
                "dataType": "code",
                "data": "\nExample : \n 10 + ''   = 10  \n 10 - '5'  = 5"
            }
        ]
    },
    {
        "id": 14,
        "qus": "Types of Logical Operators ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "&& -Logical AND",
                    "|| - Logical OR",
                    "< - Less Then",
                    "> - Greater Then",
                    "<= - Less Then or Equal To",
                    ">= - Greater Then or Equal To",
                    "== - Value Comparison Equal To",
                    "=== - Value and Type Comparison Equal To",
                    "!= - Not Equal To"
                ]
            }
        ]
    },
    {
        "id": 15,
        "qus": "Difference between == and === ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " 42 == '42' // true : compares the value (Equality Operator)"
            },
            {
                "dataType": "paragraph",
                "data": " 42 === '42' // false : compares the value and data type (Strict Equality Operator)"
            }
        ]
    },
    {
        "id": 16,
        "qus": "What is Operator and Operand ?",
        "ans": [
            {
                "dataType": "code",
                "data": "\n if( a && b) { \n write your code here.. \n }"
            },
            {
                "dataType": "list",
                "data": [
                    "&&   - Operator",
                    "a,b  - Operand"
                ]
            }
        ]
    },
    {
        "id": 17,
        "qus": "What is Template Literal ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Template Literal Uses Backtick `` "
            },
            {
                "dataType": "code",
                "data": "\n Example :\n console.log( `addition of ${a} and ${b} is ${result} `) \n addition of 5 + 5 is 10}"
            }
        ]
    },
    {
        "id": 18,
        "qus": "What is Nullish Coalescing Operator ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. "
            },
            {
                "dataType": "code",
                "data": "\n const foo = null ?? 'default string'; \n console.log(foo); // Expected output: default string \n\n const baz = 0 ?? 42; \n console.log(baz); // Expected output: 0"
            }
        ]
    },
    {
        "id": 19,
        "qus": "What is Closure in Javascript ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Closure allows inner functions to access the outer scope of a function"
            },
            {
                "dataType": "code",
                "data": "\n function outer () { \n var a = 10; \n function inner() { \n var b = 20; \n console.log(a + b) \n } \n return inner; \n } \n\n let result =  outer(); \n console.log(result)  //30"
            }
        ]
    },
    {
        "id": 20,
        "qus": "What are the array methods in Javascript ?",
        "ans": [
            {
                "dataType": "list",
                "data": [
                    "Array length - Returns array length value // array.length",
                    "Array toString() - Converts an array to a string of (comma separated) array values. //array.toString();",
                    "Array at() - Returns at position of array values. // array.at(2) || array[2]",
                    "Array join() - This method also joins all array elements into a string. // array.join(',');",
                    "Array pop() - This method removes the last element from an array. // array.pop();",
                    "Array push() - This method adds a new element to an array (at the end). // array.push('text');",
                    "Array shift() - This method removes the first array element and \"shifts\" all other elements to a lower index. // array.shift();",
                    "Array unshift() - This method adds a new element to an array (at the beginning), and \"unshifts\" older elements. // array.unshift('text');",
                    "Array delete() - Using delete() leaves undefined holes in the array. // delete array[2];",
                    "Array concat() - This method creates a new array by merging (concatenating) existing arrays. // array1.concat(array2);",
                    "Array copyWithin() - This method copies array elements to another position in an array. // array1.copyWithin(2, 0);",
                    "Array splice() - This method can be used to add new items to an array. // array1.splice(2, 0, \"new item\", \"new item\");",
                    "Array slice() - This method slices out a piece of an array into a new array. // array1.slice(2);"
                ]
            }
        ]
    },
    {
        "id": 21,
        "qus": "What is Object.create() ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object."
            },
            {
                "dataType": "code",
                "data": "\n Example \n const person = { \n isHuman: false, \n printIntroduction: function () { \n console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`); \n }, \n }; \n\n const me = Object.create(person); \n me.name = 'Matthew'; // \"name\" is a property set on \"me\", but not on \"person\" \nme.isHuman = true; // Inherited properties can be overwritten \n me.printIntroduction(); // Expected output: \"My name is Matthew. Am I human? true\""
            }
        ]
    },
    {
        "id": 22,
        "qus": "What is dot operator(.) used for ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " dot operator used to access the properties inside of an object."
            },
            {
                "dataType": "code",
                "data": "\n Example \n let person = { \n firstName : \"john\", \n lastName  : \"doe\", \n age:25 \n } \n console.log(person.firstName) // access the object value using dot operator"
            }
        ]
    },
    {
        "id": 23,
        "qus": "What is array notation ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Array notation is the method to access the properties using square bracket."
            },
            {
                "dataType": "code",
                "data": "\n Example \n let person = { \n firstName : \"john\", \n lastName  : \"doe\", \n age:25 \n } \n console.log(person['firstName']) // access the object value using dot operator"
            }
        ]
    },
    {
        "id": 24,
        "qus": "What is in operator (in) used for ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The in operator returns true if the specified property is in the specified object or its prototype chain."
            },
            {
                "dataType": "code",
                "data": "\n Example \n let person = { \n firstName : \"john\", \n lastName  : \"doe\", \n age:25 \n } \n console.log('firstName' in person) // true"
            }
        ]
    },
    {
        "id": 25,
        "qus": "How to delete a property from an Object ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The \"delete\" keyword used to delete object property."
            },
            {
                "dataType": "code",
                "data": "\n Example \n let person = { \n firstName : \"john\", \n lastName  : \"doe\", \n age:25 \n } \n console.log(delete person.age) // delete the age property from object"
            }
        ]
    },
    {
        "id": 26,
        "qus": "What is this keyword in Javascript ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The \"this\" keyword refers to an object."
            },
            {
                "dataType": "code",
                "data": "\n Example \n function createObject(name) { \n return { \n name, \n greet : function() { \n console.log( ` ${ this.name } says hello ` ) \n } \n } \n } \n\n const character = createObject('john'); \n character.greet()"
            }
        ]
    },
    {
        "id": 27,
        "qus": "What is new keyword in Javascript ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The \"new \" keyword used to create an instance of object or array."
            },
            {
                "dataType": "code",
                "data": "\n Example \n const person = new Object(); \n  const arr    = new Array();"
            }
        ]
    },
    {
        "id": 28,
        "qus": "What is prototype ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " prototypes are kind of object inheritance. Note: This willbe no longer available it's going to Deprecated."
            },
            {
                "dataType": "code",
                "data": "\n Example \n let person = { \n firstName : \"john\", \n lastName  : \"doe\", \n age:25 \n\n let scores = { \n cricket : 100, \n football  : 5, \n _proto_:person \n } \n\n console.log(scores.cricket)  // 100 }"
            }
        ]
    },
    {
        "id": 29,
        "qus": "What is oauth ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " oauth means open authentication. This is a method to login to a portal using another login credentials."
            }
        ]
    },
    {
        "id": 30,
        "qus": "Is Javascript single threaded or multi threaded ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Javascript is a single threaded. As it has single call stack."
            }
        ]
    },
    {
        "id": 31,
        "qus": "How Javascript working ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Browser API's are Asynchronus."
            },
            {
                "dataType": "paragraph",
                "data": " They are added in the queue."
            },
            {
                "dataType": "paragraph",
                "data": " Then It goes to call stack."
            },
            {
                "dataType": "paragraph",
                "data": " Queue to call stack moving is called as execution."
            }
        ]
    },
    {
        "id": 32,
        "qus": "Is Javascript Static Language or Dynamic Language ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Javascript is a dynamic language as we can change the values and types."
            }
        ]
    },
    {
        "id": 33,
        "qus": "Difference between Preincrement and Postincrement ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " Preincrement"
            },
            {
                "dataType": "list",
                "data": [
                    "++a returns the value of a after it has been incremented."
                ]
            },
            {
                "dataType": "code",
                "data": "\n let a = 1; \n let b = ++a; \n console.log(b); // prints 2"
            },
            {
                "dataType": "paragraph",
                "data": " Postincrement"
            },
            {
                "dataType": "list",
                "data": [
                    " a++ returns the value of a before incrementing."
                ]
            },
            {
                "dataType": "code",
                "data": "\n let a = 1; \n let b = a++; \n console.log(b);  // prints 1"
            }
        ]
    },
    {
        "id": 34,
        "qus": "What is querySelector() ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " The querySelector() method returns the first child element that matches a specified CSS selector(s) of an element"
            },
            {
                "dataType": "paragraph",
                "data": " \"Note\": The querySelector() method only returns the first element that matches the specified selectors. To return all the matches, use the querySelectorAll() method instead."
            }
        ]
    },
    {
        "id": 35,
        "qus": "What is Class ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": " JavaScript Classes are templates for JavaScript Objects."
            },
            {
                "dataType": "code",
                "data": " \n\n class Car { \n constructor(name, year) { \n this.name = name; \n this.year = year; \n } \n }"
            },
            {
                "dataType": "paragraph",
                "data": " The example above creates a class named \"Car\"."
            },
            {
                "dataType": "paragraph",
                "data": " The class has two initial properties: \"name\" and \"year\"."
            },
            {
                "dataType": "paragraph",
                "data": " A JavaScript class is not an object. It is a template for JavaScript objects"
            }
        ]
    },
    {
        "id": 36,
        "qus": "Differences of var let and Const ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": "In JavaScript, users can declare a variable using three keywords that are var, let, and const. The behavior and the scope of a variable are also based on the keyword used to define it."
            },
            {
                "dataType": "paragraph",
                "data": "var"
            },
            {
                "dataType": "list",
                "data": [
                    "In JavaScript. It has the Global scoped or function scoped",
                    "It means variables defined outside the function can be accessed globally"
                ]
            },
            {
                "dataType": "code",
                "data": "\n var a = 10 \n function f() { \n var b = 20 \n console.log(a, b) // 10 20\n } \n f(); \n console.log(a) // 10;"
            },
            {
                "dataType": "paragraph",
                "data": "let"
            },
            {
                "dataType": "list",
                "data": [
                    "The let keyword is an improved version of the var keyword.",
                    "These variables has the block scope.",
                    "It canâ€™t be accessible outside the particular code block ({block})."
                ]
            },
            {
                "dataType": "code",
                "data": "\n let a = 10 \n if (true) { \n let a = 9 \n console.log(a)//9 \n } \n console.log(a); //10"
            },
            {
                "dataType": "paragraph",
                "data": "const"
            },
            {
                "dataType": "list",
                "data": [
                    "The user cannot update it and have to assign it with a value at the time of declaration.",
                    "These variables also have the block scope.",
                    "It is mainly used to create constant variables whose values can not be changed once they are initialized with a value."
                ]
            },
            {
                "dataType": "code",
                "data": "\n const a = 10 \n function f() { \n a = 9 \n console.log(a)//TypeError:Assignment to constant variable. \n } \n f()"
            }
        ]
    },
    {
        "id": 37,
        "qus": "What is abstraction ?",
        "ans": [
            {
                "dataType": "paragraph",
                "data": "Abstraction in computer programming is a way to reduce complexity and allow efficient design and implementation in complex software systems." 
            },
            {
                "dataType": "paragraph",
                "data": "Advantages" 
            },
            {
                "dataType": "list",
                "data": [
                    "Helps the user to avoid writing low-level code.",
                    "Avoids code duplication and increases reusability.",
                    "Can change the internal implementation of a class independently without affecting the user.",
                    "Helps to increase the security of an application or program as only important details are provided to the user."
                ]
            },
            {
                "dataType": "code",
                "data": "\n class ImplementAbstraction { \n // method to set values of internal members \n set(x, y) { \n this.a = x; \n this.b = y; \n } \n display() { \n console.log(`a = ${this.a}`); \n console.log(`b = ${this.b}`); \n } \n }\n const obj = new ImplementAbstraction(); \n obj.set(10, 20); \n obj.display(); \n // a = 10 \n // b = 20"
            }
        ]
    },
    {
        "id": 38,
        "qus": "What is try catch ?",
        "ans":[
            {
                "dataType":"paragraph",
                "data": "The try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct."
            },
            {
                "dataType":"code",
                "data":"\n try { \n nonExistentFunction(); \n } catch (error) { \n console.error(error); \n // Expected output: ReferenceError: nonExistentFunction is not defined \n // (Note: the exact output may be browser-dependent) \n }"
            }
        ]
    },
    {
        "id": 39,
        "qus": "What is anonymous Function ?",
        "ans":[
            {
                "dataType":"paragraph",
                "data":"Anonymous functions are functions that do not have a name. They can be assigned to variables or passed as arguments to higher order functions."
            },
            {
                "dataType":"code",
                "data":"\n let show = function() { \n console.log('Anonymous function'); \n}; \n show();"
            }
        ]
    },
    {
        "id": 40,
        "qus": "What is factory function ?"
    },
    {
        "id": 41,
        "qus": "What is constructor ?"
    },
    {
        "id": 42,
        "qus": "What is Object.assign({}) ?"
    },
    {
        "id": 43,
        "qus": "What is dot(.) notation ?"
    },
    {
        "id": 44,
        "qus": "What is bracket() notation ?"
    },
    {
        "id": 45,
        "qus": "What is array notation ?"
    },
    {
        "id": 46,
        "qus": "What is in operator (in) used for ?"
    },
    {
        "id": 47,
        "qus": "What is prototype  ?"
    },
    {
        "id": 48,
        "qus": "Difference between function and class ?"
    },
    {
        "id": 49,
        "qus": "What is sub-sequence ?"
    },
    {
        "id": 50,
        "qus": "What is event loop ?"
    }
]